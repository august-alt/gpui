// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "foldersschema.h"

// Folders
// 

const Folders::FolderType& Folders::
Folder () const
{
  return this->Folder_.get ();
}

Folders::FolderType& Folders::
Folder ()
{
  return this->Folder_.get ();
}

void Folders::
Folder (const FolderType& x)
{
  this->Folder_.set (x);
}

void Folders::
Folder (::std::unique_ptr< FolderType > x)
{
  this->Folder_.set (std::move (x));
}

const Folders::ClsidType& Folders::
clsid () const
{
  return this->clsid_.get ();
}

Folders::ClsidType& Folders::
clsid ()
{
  return this->clsid_.get ();
}

void Folders::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Folders::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Folders::DisabledOptional& Folders::
disabled () const
{
  return this->disabled_;
}

Folders::DisabledOptional& Folders::
disabled ()
{
  return this->disabled_;
}

void Folders::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Folders::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Folder
// 

const Folder::PropertiesType& Folder::
Properties () const
{
  return this->Properties_.get ();
}

Folder::PropertiesType& Folder::
Properties ()
{
  return this->Properties_.get ();
}

void Folder::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void Folder::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const Folder::ClsidType& Folder::
clsid () const
{
  return this->clsid_.get ();
}

Folder::ClsidType& Folder::
clsid ()
{
  return this->clsid_.get ();
}

void Folder::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Folder::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Folder::NameType& Folder::
name () const
{
  return this->name_.get ();
}

Folder::NameType& Folder::
name ()
{
  return this->name_.get ();
}

void Folder::
name (const NameType& x)
{
  this->name_.set (x);
}

void Folder::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Folder::StatusOptional& Folder::
status () const
{
  return this->status_;
}

Folder::StatusOptional& Folder::
status ()
{
  return this->status_;
}

void Folder::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Folder::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Folder::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}

const Folder::ImageOptional& Folder::
image () const
{
  return this->image_;
}

Folder::ImageOptional& Folder::
image ()
{
  return this->image_;
}

void Folder::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Folder::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Folder::ChangedOptional& Folder::
changed () const
{
  return this->changed_;
}

Folder::ChangedOptional& Folder::
changed ()
{
  return this->changed_;
}

void Folder::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Folder::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Folder::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Folder::UidType& Folder::
uid () const
{
  return this->uid_.get ();
}

Folder::UidType& Folder::
uid ()
{
  return this->uid_.get ();
}

void Folder::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Folder::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const Folder::DescOptional& Folder::
desc () const
{
  return this->desc_;
}

Folder::DescOptional& Folder::
desc ()
{
  return this->desc_;
}

void Folder::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void Folder::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void Folder::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const Folder::BypassErrorsOptional& Folder::
bypassErrors () const
{
  return this->bypassErrors_;
}

Folder::BypassErrorsOptional& Folder::
bypassErrors ()
{
  return this->bypassErrors_;
}

void Folder::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void Folder::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const Folder::UserContextOptional& Folder::
userContext () const
{
  return this->userContext_;
}

Folder::UserContextOptional& Folder::
userContext ()
{
  return this->userContext_;
}

void Folder::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void Folder::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const Folder::RemovePolicyOptional& Folder::
removePolicy () const
{
  return this->removePolicy_;
}

Folder::RemovePolicyOptional& Folder::
removePolicy ()
{
  return this->removePolicy_;
}

void Folder::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void Folder::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// Properties
// 

const Properties::ActionOptional& Properties::
action () const
{
  return this->action_;
}

Properties::ActionOptional& Properties::
action ()
{
  return this->action_;
}

void Properties::
action (const ActionType& x)
{
  this->action_.set (x);
}

void Properties::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void Properties::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const Properties::PathType& Properties::
path () const
{
  return this->path_.get ();
}

Properties::PathType& Properties::
path ()
{
  return this->path_.get ();
}

void Properties::
path (const PathType& x)
{
  this->path_.set (x);
}

void Properties::
path (::std::unique_ptr< PathType > x)
{
  this->path_.set (std::move (x));
}

const Properties::ReadOnlyType& Properties::
readOnly () const
{
  return this->readOnly_.get ();
}

Properties::ReadOnlyType& Properties::
readOnly ()
{
  return this->readOnly_.get ();
}

void Properties::
readOnly (const ReadOnlyType& x)
{
  this->readOnly_.set (x);
}

const Properties::ArchiveType& Properties::
archive () const
{
  return this->archive_.get ();
}

Properties::ArchiveType& Properties::
archive ()
{
  return this->archive_.get ();
}

void Properties::
archive (const ArchiveType& x)
{
  this->archive_.set (x);
}

const Properties::HiddenType& Properties::
hidden () const
{
  return this->hidden_.get ();
}

Properties::HiddenType& Properties::
hidden ()
{
  return this->hidden_.get ();
}

void Properties::
hidden (const HiddenType& x)
{
  this->hidden_.set (x);
}

const Properties::DeleteSubFoldersOptional& Properties::
deleteSubFolders () const
{
  return this->deleteSubFolders_;
}

Properties::DeleteSubFoldersOptional& Properties::
deleteSubFolders ()
{
  return this->deleteSubFolders_;
}

void Properties::
deleteSubFolders (const DeleteSubFoldersType& x)
{
  this->deleteSubFolders_.set (x);
}

void Properties::
deleteSubFolders (const DeleteSubFoldersOptional& x)
{
  this->deleteSubFolders_ = x;
}

const Properties::DeleteFilesOptional& Properties::
deleteFiles () const
{
  return this->deleteFiles_;
}

Properties::DeleteFilesOptional& Properties::
deleteFiles ()
{
  return this->deleteFiles_;
}

void Properties::
deleteFiles (const DeleteFilesType& x)
{
  this->deleteFiles_.set (x);
}

void Properties::
deleteFiles (const DeleteFilesOptional& x)
{
  this->deleteFiles_ = x;
}

const Properties::DeleteFolderOptional& Properties::
deleteFolder () const
{
  return this->deleteFolder_;
}

Properties::DeleteFolderOptional& Properties::
deleteFolder ()
{
  return this->deleteFolder_;
}

void Properties::
deleteFolder (const DeleteFolderType& x)
{
  this->deleteFolder_.set (x);
}

void Properties::
deleteFolder (const DeleteFolderOptional& x)
{
  this->deleteFolder_ = x;
}

const Properties::DeleteReadOnlyOptional& Properties::
deleteReadOnly () const
{
  return this->deleteReadOnly_;
}

Properties::DeleteReadOnlyOptional& Properties::
deleteReadOnly ()
{
  return this->deleteReadOnly_;
}

void Properties::
deleteReadOnly (const DeleteReadOnlyType& x)
{
  this->deleteReadOnly_.set (x);
}

void Properties::
deleteReadOnly (const DeleteReadOnlyOptional& x)
{
  this->deleteReadOnly_ = x;
}

const Properties::DeleteIgnoreErrorsOptional& Properties::
deleteIgnoreErrors () const
{
  return this->deleteIgnoreErrors_;
}

Properties::DeleteIgnoreErrorsOptional& Properties::
deleteIgnoreErrors ()
{
  return this->deleteIgnoreErrors_;
}

void Properties::
deleteIgnoreErrors (const DeleteIgnoreErrorsType& x)
{
  this->deleteIgnoreErrors_.set (x);
}

void Properties::
deleteIgnoreErrors (const DeleteIgnoreErrorsOptional& x)
{
  this->deleteIgnoreErrors_ = x;
}

const Properties::DisabledOptional& Properties::
disabled () const
{
  return this->disabled_;
}

Properties::DisabledOptional& Properties::
disabled ()
{
  return this->disabled_;
}

void Properties::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Properties::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// Folders
//

Folders::
Folders (const FolderType& Folder,
         const ClsidType& clsid)
: ::xml_schema::Type (),
  Folder_ (Folder, this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Folders::
Folders (::std::unique_ptr< FolderType > Folder,
         const ClsidType& clsid)
: ::xml_schema::Type (),
  Folder_ (std::move (Folder), this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Folders::
Folders (const Folders& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Folder_ (x.Folder_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Folders::
Folders (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Folder_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Folders::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Folder
    //
    if (n.name () == "Folder" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< FolderType > r (
        FolderTraits::create (i, f, this));

      if (!Folder_.present ())
      {
        this->Folder_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!Folder_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Folder",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

Folders* Folders::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Folders (*this, f, c);
}

Folders& Folders::
operator= (const Folders& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Folder_ = x.Folder_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Folders::
~Folders ()
{
}

// Folder
//

Folder::
Folder (const PropertiesType& Properties,
        const ClsidType& clsid,
        const NameType& name,
        const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

Folder::
Folder (::std::unique_ptr< PropertiesType > Properties,
        const ClsidType& clsid,
        const NameType& name,
        const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

Folder::
Folder (const Folder& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  status_ (x.status_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

Folder::
Folder (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Folder::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    if (n.name () == "Properties" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< PropertiesType > r (
        PropertiesTraits::create (i, f, this));

      if (!Properties_.present ())
      {
        this->Properties_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Folder* Folder::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Folder (*this, f, c);
}

Folder& Folder::
operator= (const Folder& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->status_ = x.status_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

Folder::
~Folder ()
{
}

// Properties
//

Properties::
Properties (const PathType& path,
            const ReadOnlyType& readOnly,
            const ArchiveType& archive,
            const HiddenType& hidden)
: ::xml_schema::Type (),
  action_ (this),
  path_ (path, this),
  readOnly_ (readOnly, this),
  archive_ (archive, this),
  hidden_ (hidden, this),
  deleteSubFolders_ (this),
  deleteFiles_ (this),
  deleteFolder_ (this),
  deleteReadOnly_ (this),
  deleteIgnoreErrors_ (this),
  disabled_ (this)
{
}

Properties::
Properties (const Properties& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  path_ (x.path_, f, this),
  readOnly_ (x.readOnly_, f, this),
  archive_ (x.archive_, f, this),
  hidden_ (x.hidden_, f, this),
  deleteSubFolders_ (x.deleteSubFolders_, f, this),
  deleteFiles_ (x.deleteFiles_, f, this),
  deleteFolder_ (x.deleteFolder_, f, this),
  deleteReadOnly_ (x.deleteReadOnly_, f, this),
  deleteIgnoreErrors_ (x.deleteIgnoreErrors_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Properties::
Properties (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  path_ (this),
  readOnly_ (this),
  archive_ (this),
  hidden_ (this),
  deleteSubFolders_ (this),
  deleteFiles_ (this),
  deleteFolder_ (this),
  deleteReadOnly_ (this),
  deleteIgnoreErrors_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Properties::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      this->path_.set (PathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "readOnly" && n.namespace_ ().empty ())
    {
      this->readOnly_.set (ReadOnlyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "archive" && n.namespace_ ().empty ())
    {
      this->archive_.set (ArchiveTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hidden" && n.namespace_ ().empty ())
    {
      this->hidden_.set (HiddenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteSubFolders" && n.namespace_ ().empty ())
    {
      this->deleteSubFolders_.set (DeleteSubFoldersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteFiles" && n.namespace_ ().empty ())
    {
      this->deleteFiles_.set (DeleteFilesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteFolder" && n.namespace_ ().empty ())
    {
      this->deleteFolder_.set (DeleteFolderTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteReadOnly" && n.namespace_ ().empty ())
    {
      this->deleteReadOnly_.set (DeleteReadOnlyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteIgnoreErrors" && n.namespace_ ().empty ())
    {
      this->deleteIgnoreErrors_.set (DeleteIgnoreErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!path_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "path",
      "");
  }

  if (!readOnly_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "readOnly",
      "");
  }

  if (!archive_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "archive",
      "");
  }

  if (!hidden_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hidden",
      "");
  }
}

Properties* Properties::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Properties (*this, f, c);
}

Properties& Properties::
operator= (const Properties& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->path_ = x.path_;
    this->readOnly_ = x.readOnly_;
    this->archive_ = x.archive_;
    this->hidden_ = x.hidden_;
    this->deleteSubFolders_ = x.deleteSubFolders_;
    this->deleteFiles_ = x.deleteFiles_;
    this->deleteFolder_ = x.deleteFolder_;
    this->deleteReadOnly_ = x.deleteReadOnly_;
    this->deleteIgnoreErrors_ = x.deleteIgnoreErrors_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Properties::
~Properties ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const Folders& i)
{
  o << ::std::endl << "Folder: " << i.Folder ();
  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const Folder& i)
{
  o << ::std::endl << "Properties: " << i.Properties ();
  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const Properties& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "path: " << i.path ();
  o << ::std::endl << "readOnly: " << i.readOnly ();
  o << ::std::endl << "archive: " << i.archive ();
  o << ::std::endl << "hidden: " << i.hidden ();
  if (i.deleteSubFolders ())
  {
    o << ::std::endl << "deleteSubFolders: " << *i.deleteSubFolders ();
  }

  if (i.deleteFiles ())
  {
    o << ::std::endl << "deleteFiles: " << *i.deleteFiles ();
  }

  if (i.deleteFolder ())
  {
    o << ::std::endl << "deleteFolder: " << *i.deleteFolder ();
  }

  if (i.deleteReadOnly ())
  {
    o << ::std::endl << "deleteReadOnly: " << *i.deleteReadOnly ();
  }

  if (i.deleteIgnoreErrors ())
  {
    o << ::std::endl << "deleteIgnoreErrors: " << *i.deleteIgnoreErrors ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Folders >
Folders_ (const ::std::string& u,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Folders > (
    ::Folders_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Folders >
Folders_ (const ::std::string& u,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Folders > (
    ::Folders_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Folders >
Folders_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Folders > (
    ::Folders_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Folders >
Folders_ (::std::istream& is,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Folders_ (isrc, f, p);
}

::std::unique_ptr< ::Folders >
Folders_ (::std::istream& is,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Folders_ (isrc, h, f, p);
}

::std::unique_ptr< ::Folders >
Folders_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Folders_ (isrc, h, f, p);
}

::std::unique_ptr< ::Folders >
Folders_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Folders_ (isrc, f, p);
}

::std::unique_ptr< ::Folders >
Folders_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Folders_ (isrc, h, f, p);
}

::std::unique_ptr< ::Folders >
Folders_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Folders_ (isrc, h, f, p);
}

::std::unique_ptr< ::Folders >
Folders_ (::xercesc::InputSource& i,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Folders > (
    ::Folders_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Folders >
Folders_ (::xercesc::InputSource& i,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Folders > (
    ::Folders_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Folders >
Folders_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Folders > (
    ::Folders_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Folders >
Folders_ (const ::xercesc::DOMDocument& doc,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Folders > (
      ::Folders_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Folders" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Folders > r (
      ::xsd::cxx::tree::traits< ::Folders, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Folders",
    "");
}

::std::unique_ptr< ::Folders >
Folders_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Folders" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Folders > r (
      ::xsd::cxx::tree::traits< ::Folders, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Folders",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

